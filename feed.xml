<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>코드정원</title><subtitle>개발하면서 공부한 내용 및 기타 주절 주절...</subtitle> <updated>2022-08-26T18:05:11+09:00</updated> <author> <name>sjungwon</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 sjungwon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>템플릿 메소드</title><link href="/posts/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C/" rel="alternate" type="text/html" title="템플릿 메소드" /><published>2022-08-26T16:04:00+09:00</published> <updated>2022-08-26T16:04:00+09:00</updated> <id>/posts/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C/</id> <content src="/posts/%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C/" /> <author> <name>sjungwon</name> </author> <category term="자바" /> <category term="디자인패턴" /> <summary> 템플릿 메서드 패턴 추상 메서드를 배우던 중 디자인 패턴이 나와 정리해두려고 작성한다. 템플릿 메서드에 대한 자세한 내용은 참고 블로그를 보면 있다. 템플릿 메서드는 시작부터 끝사이의 동작들과 같이 어떤 수행해야할 로직들을 덩어리로 미리 정의해놓는 것이다. 템플릿 메서드는 훅 메서드와 같이 사용하는데 훅 메서드는 템플릿 메서드의 수행 로직 사이에 어떤 추가 로직을 넣을 수도 있겠다 싶은 곳에서 사용한다. 아무 내용 없는 훅 메서드를 정의하고 실행 흐름 사이에서 호출해놓는다. 이후 하위 클래스에서 실행 로직 중간에 추가 로직을 구현하려 할 때 훅 메서드를 오버라이딩해서 작성해주면 된다. 아래 코드를 보면 전자레인지를 추상 클래스로 선언했다. 전자레인지의 일반적인 동... </summary> </entry> <entry><title>자바 언어의 특징</title><link href="/posts/%EC%9E%90%EB%B0%94%EC%96%B8%EC%96%B4%EC%9D%98-%ED%8A%B9%EC%A7%95/" rel="alternate" type="text/html" title="자바 언어의 특징" /><published>2022-08-20T00:34:00+09:00</published> <updated>2022-08-26T18:03:57+09:00</updated> <id>/posts/%EC%9E%90%EB%B0%94%EC%96%B8%EC%96%B4%EC%9D%98-%ED%8A%B9%EC%A7%95/</id> <content src="/posts/%EC%9E%90%EB%B0%94%EC%96%B8%EC%96%B4%EC%9D%98-%ED%8A%B9%EC%A7%95/" /> <author> <name>sjungwon</name> </author> <category term="자바" /> <category term="언어" /> <summary> 특징 1. 운영체제에 독립적이다. 자바는 에뮬레이터의 일종인 자바가상머신(JVM)을 통해서 실행된다. JVM은 자바를 실행하기 위한 가상 컴퓨터 다른 언어는 OS를 거쳐 바로 하드웨어로 전달되는 것과 달리 자바는 JVM을 거치기 때문에 완전히 컴파일된 상태가 아니고 바이트코드로 변환되고 실행시에 해석되기 때문에 속도가 느리다는 단점이 있었음 바이트코드를 변환해주는 JIT컴파일러와 최적화 기술로 속도가 많이 빨라짐 다른 언어는 운영체제와 바로 통신하기 때문에 운영체제에 종속적이고 자바는 JVM과 통신하기 때문에 운영체제에 종속적이지 않음. 단, JVM은 운영체제에 종속적 자바는 JVM 위에서만 동작하기 때문에 JVM은 필수 ... </summary> </entry> <entry><title>스프링 시작</title><link href="/posts/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%EC%9E%91/" rel="alternate" type="text/html" title="스프링 시작" /><published>2022-08-20T00:26:00+09:00</published> <updated>2022-08-20T00:26:00+09:00</updated> <id>/posts/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%EC%9E%91/</id> <content src="/posts/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%8B%9C%EC%9E%91/" /> <author> <name>sjungwon</name> </author> <category term="스프링" /> <summary> 스프링 공부 시작 typescript 기반의 Node로 서버 구현 경험을 했음 node의 express는 너무 자유롭고 nestjs는 틀이 꽤 있지만 관련된 자료가 부족한 것 같아 백엔드를 공부하기에 마음이 편하지 않았음 언어를 다시 공부해야하지만 스프링을 통해 객체 지향, 디자인 패턴 등에 익숙해진 후에 다시 사용해 보는 것이 마음이 편할 것 같아 스프링 공부를 시작 </summary> </entry> <entry><title>이벤트루프</title><link href="/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A3%A8%ED%94%84/" rel="alternate" type="text/html" title="이벤트루프" /><published>2022-08-17T02:36:00+09:00</published> <updated>2022-08-17T02:36:00+09:00</updated> <id>/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A3%A8%ED%94%84/</id> <content src="/posts/%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A3%A8%ED%94%84/" /> <author> <name>sjungwon</name> </author> <category term="노드" /> <summary> 이벤트 루프란? 노드가 논 블로킹 I/O 작업을 수행할 수 있도록 이벤트 루프가 비동기가 가능하면 시스템 커널에 작업을 넘김 현대 커널은 멀티 스레드이므로 백그라운드에서 다수의 작업을 실행 가능 커널에서 작업을 완료하면 커널이 노드에게 완료를 알려주어 적잘한 콜백을 poll 큐에 추가할 수 있게함 설명 노드를 시작할 때 이벤트 루프를 초기화하고 제공된 입력 스크립트를 처리 입력 스크립트에서는 비동기 API, 타이머, process.nextTick()을 호출 가능 이후 이벤트루프 처리를 시작함 이벤트 루프 단계 ┌───────────────────────────┐ ┌─&amp;gt;│ timers │ │ └─────────────┬─... </summary> </entry> <entry><title>libuv</title><link href="/posts/libuv/" rel="alternate" type="text/html" title="libuv" /><published>2022-08-15T00:06:00+09:00</published> <updated>2022-08-15T00:06:00+09:00</updated> <id>/posts/libuv/</id> <content src="/posts/libuv/" /> <author> <name>sjungwon</name> </author> <category term="노드" /> <summary> Node 공식 문서의 블로킹 vs 논-블로킹 첫 문장이다. I/O는 주로 libuv가 지원하는 시스템 디스크나 네트워크와 상호작용하는 것을 가리킨다. libuv 문서 libuv가 먼저 무엇인지 살펴보자 위 링크를 타고 libuv로 들어가면 Asyncronous I/O made simple - libuv is a multi-platform support library with a focus on asynchronous I/O라는 첫 글이 나온다. Node가 I/O에 대한 처리를 직접하지 않는다는 것이 비동기 I/O 라이브러리인 libuv를 사용함으로써 해결했다는 것을 알 수 있다. document로 들어가보면 어떤 기능을 제공하는지 볼 수 있다. epoll... </summary> </entry> </feed>
